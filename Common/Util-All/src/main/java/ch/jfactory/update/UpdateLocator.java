/*
 * Copyright (c) 2004-2011, Daniel Frey, www.xmatrix.ch
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under this License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS OF  ANY  KIND, either  express or
 * implied.  See  the  License  for  the  specific  language governing
 * permissions and limitations under the License.
 */

/* Generated by Together */
package ch.jfactory.update;

import java.beans.XMLDecoder;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is used for update functionallity
 *
 * @author $Author: daniel_frey $
 * @version $Revision: 1.3 $ $Date: 2007/09/27 10:41:22 $
 */
public class UpdateLocator
{
    private static final Logger LOGGER = LoggerFactory.getLogger( UpdateLocator.class );

    private String currentServerLocation = null;

    private List currentVersions = Collections.EMPTY_LIST;

    /**
     * check if the current location is a valid update server.
     *
     * @param location location to the update server
     * @return true = valid, false = invalid
     */
    public boolean isValidUpdateLocation( final String location )
    {
        if ( LOGGER.isInfoEnabled() )
        {
            LOGGER.info( "check update location: " + location );
        }

        try
        {
            getVersionsFromURL( location );
            return true;
        }
        catch ( Exception ex )
        {
            if ( LOGGER.isInfoEnabled() )
            {
                LOGGER.info( "location " + location + " isn't a valid update location.", ex );
            }
        }
        return false;
    }

    /**
     * This method returns a list of all UpdateModules which should be updated from the server.
     *
     * @param serverLocation the locaiton to the server
     * @param localLocation  the location where original files are
     * @return a list of UpdateModule objects
     */
    public List locateUpdates( final String serverLocation, final String localLocation )
    {
        if ( LOGGER.isInfoEnabled() )
        {
            LOGGER.info( "find updates from " + serverLocation + " for local versions " + localLocation );
        }

        // get updates from server
        final Collection serverVersions = getVersionsFromURL( serverLocation );

        // get local versions
        final Map<String, VersionInfo> localVersions = LocalVersionLocator.locateVersionsAsMap();

        // find modules to be updated
        final List<JarUpdateModule> updates = new ArrayList<JarUpdateModule>();
        for ( final Object serverVersion1 : serverVersions )
        {
            final VersionInfo serverVersion = (VersionInfo) serverVersion1;
            final VersionInfo localVersion = localVersions.get( serverVersion.getName() );
            if ( serverVersion.isNewerAs( localVersion ) )
            {
                updates.add( new JarUpdateModule( serverVersion, localVersion ) );
            }
        }

        return updates;
    }

    private List getVersionsFromURL( final String location )
    {
        if ( !location.equals( currentServerLocation ) )
        {
            try
            {
                final URL url = new URL( location );
                final URLConnection con = url.openConnection();
                final XMLDecoder dec = new XMLDecoder( con.getInputStream() );
                currentVersions = (List) dec.readObject();
                dec.close();
                // remember location only if the location was valid, otherwise no check will be performed any more!
                currentServerLocation = location;
            }
            catch ( MalformedURLException mex )
            {
                currentVersions = Collections.EMPTY_LIST;
                final String msg = "the url " + location + " is not a legal url.";
                LOGGER.warn( msg );
                throw new IllegalArgumentException( msg );
            }
            catch ( IOException ioex )
            {
                currentVersions = Collections.EMPTY_LIST;
                final String msg = "the connection to url " + location + " failed.";
                LOGGER.warn( msg );
                throw new IllegalStateException( msg );
            }
        }
        return currentVersions;
    }
}
