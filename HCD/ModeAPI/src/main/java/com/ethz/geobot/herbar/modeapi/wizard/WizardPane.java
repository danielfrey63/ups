/*
 * Copyright (c) 2011.
 *
 * Nutzung und Rechte
 *
 * Die Applikation eBot wurde für Studierende der ETH Zürich entwickelt. Sie  steht
 * allen   an   Hochschulen  oder   Fachhochschulen   eingeschriebenen Studierenden
 * (auch  ausserhalb  der  ETH  Zürich)  für  nichtkommerzielle  Zwecke  im Studium
 * kostenlos zur Verfügung. Nichtstudierende Privatpersonen, die die Applikation zu
 * ihrer  persönlichen  Weiterbildung  nutzen  möchten,  werden  gebeten,  für  die
 * nichtkommerzielle Nutzung einen einmaligen Beitrag von Fr. 20.– zu bezahlen.
 *
 * Postkonto
 *
 * Unterricht, 85-761469-0, Vermerk "eBot"
 * IBAN 59 0900 0000 8576  1469 0; BIC POFICHBEXXX
 *
 * Jede andere Nutzung der Applikation  ist vorher mit dem Projektleiter  (Matthias
 * Baltisberger, Email:  balti@ethz.ch) abzusprechen  und mit  einer entsprechenden
 * Vereinbarung zu regeln. Die  Applikation wird ohne jegliche  Garantien bezüglich
 * Nutzungsansprüchen zur Verfügung gestellt.
 */
package com.ethz.geobot.herbar.modeapi.wizard;

import ch.jfactory.application.presentation.Constants;
import ch.jfactory.bean.ExtendedBeanInfo;
import ch.jfactory.component.ComponentFactory;
import ch.jfactory.component.EditItem;
import ch.jfactory.component.JMultiLineLabel;
import ch.jfactory.component.TextEditItem;
import ch.jfactory.resource.ImageLocator;
import ch.jfactory.resource.Strings;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionListener;
import java.awt.event.FocusListener;
import java.beans.IntrospectionException;
import java.lang.reflect.Method;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.border.EmptyBorder;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Super class for all wizard panes. All wizard panes must be inherit from this class. It enhance JPanel with some wizard related features.
 *
 * @author $Author: daniel_frey $
 * @version $Revision: 1.1 $
 */
public abstract class WizardPane extends JPanel
{
    /** This class' logger. */
    private static final Logger LOG = LoggerFactory.getLogger( WizardPane.class );

    /** The wizard model should be initialize in init. */
    private WizardModel model;

    /** Name of the pane. */
    private final String name;

    /** Map of properties. */
    ExtendedBeanInfo ebi;

    /** List of property names used for validation. */
    private final String[] propertyNames;

    protected String prefix;

    /**
     * This constructor initialize a pane with a given name.
     *
     * @param name          the name of the pane
     * @param propertyNames the name of the properties to validate
     */
    public WizardPane( final String name, final String[] propertyNames )
    {
        super();
        this.name = name;
        this.propertyNames = propertyNames;
        prefix = "WIZARD." + getName().toUpperCase();
        initGui();
    }

    private void initGui()
    {
        final JLabel picture = createWizardPicture( prefix + ".ICON" );
        final JPanel display = createDisplayPanel( prefix );

        final int gap = Constants.GAP_BETWEEN_GROUP;

        display.setBorder( BorderFactory.createCompoundBorder( BorderFactory.createCompoundBorder( BorderFactory.createEmptyBorder( 0, gap, 0, 0 ),
                BorderFactory.createEtchedBorder() ),
                BorderFactory.createEmptyBorder( gap, gap, gap, gap ) ) );

        setLayout( new BorderLayout() );
        add( picture, BorderLayout.WEST );
        add( display, BorderLayout.CENTER );
    }

    /**
     * The default approach taken to fill the right hand side of the wizard pane includes a text area in the upper part (see {@link #createTextPanel(String)}) and an edit area in the lower part (see {@link #createEditPanel(String)}).<p> Overwrite this method if you decide to take another approach. Even if you decide to overwrite this method, it is guaranteed that the panel is properly bordered by a edged border with the correct insets.
     *
     * @param prefix the prefix to the key to search for the text, icons, tooltips
     * @return panel containing the right hand side of the wizard pane
     */
    public abstract JPanel createDisplayPanel( final String prefix );

    /**
     * The default text display is a simple text block component which is taking its text from the global string resource. The key to search for the text is generated by using the prefix given and appending an extension. Assume <code>PREFIX</code> to be the prefix, then the key looks like this: <code>PREFIX.TEXT</code><p> The text is displayed in a field with the panels background color, but without scrolling object.<p> Overwrite this method if you want to have another text display than the default. This will change all default text displays.
     *
     * @param prefix for string replacement
     * @return the panel with the text
     */
    protected JPanel createTextPanel( final String prefix )
    {
        final JMultiLineLabel text = new JMultiLineLabel( Strings.getString( prefix + ".TEXT" ) );
        final JPanel textPanel = new JPanel( new BorderLayout() );
        textPanel.add( text, BorderLayout.CENTER );
        return textPanel;
    }

    /**
     * The default edit area just returns the edit constructed by {@link #createDefaultEdit(String, ActionListener)}.<p> Overwrite this method to setup a customized edit area. If you return null, this area will be excluded properly.
     *
     * @param prefix for string replacement
     * @return JPanel containing the edit region
     */
    protected JPanel createEditPanel( final String prefix )
    {
        return createDefaultEdit( prefix, getEditAction() );
    }

    /**
     * Returns a default edit item containing a title in bold, a field displaying the current status and a button to invoke an action to edit the current status. The string key is composed by the prefix <code>WIZARD</code>, the name of the wizard in uppercase, i.e. <code>NAME</code> and post-fix <code>CHOOSE</code>, each part separated by a dot: <code>WIZARD.NAME.CHOOSE</code>.<p> If you overwrite this method, you will exchange all edit items for the default behaviour of the wizard.<p> See documentation of {@link EditItem#EditItem(String, ActionListener)} to see what further extensions are appended to this key to get the final strings.
     *
     * @param prefix     for string replacement
     * @param editAction the action when edited
     * @return edit item
     */
    protected EditItem createDefaultEdit( final String prefix, final ActionListener editAction )
    {
        return new EditItem( prefix, editAction );
    }

    protected TextEditItem createDefaultTextEdit( final String prefix, final ActionListener editAction, final FocusListener focus )
    {
        return new TextEditItem( prefix, editAction, focus );
    }

    /**
     * return the name of the pane.
     *
     * @return name of the pane
     */
    public String getName()
    {
        return name;
    }

    public String toString()
    {
        return name;
    }

    public WizardModel getWizardModel()
    {
        return model;
    }

    /** Is invoked by the wizard if it enter this pane. Overwrite this method if you want to take actions upon activation. */
    public void activate()
    {
    }

    /** Is invoked by the wizard if it leaves this pane. Overwrite this method if you want to take actions upon activation. */
    public void deactivate()
    {
    }

    /**
     * Is called before any activation or deactivation of the pane.
     *
     * @return whether it is ok to switch to the next pane
     */
    public boolean isNextOk()
    {
        return true;
    }

    /**
     * Is called before any deactivation of the pane.
     *
     * @return whether it is ok to switch cancel the dialog
     */
    public boolean isCancelOk()
    {
        return true;
    }

    /**
     * Is called before any activation or deactivation of the pane is made.
     *
     * @return whether it is ok to switch to the previous pane
     */
    public boolean isPreviousOk()
    {
        return true;
    }

    /**
     * Overwrite this method to get the simples solution to an editable item by clicking on a button.
     *
     * @return ActionListener to invoke when button is clicked
     */
    protected ActionListener getEditAction()
    {
        return null;
    }

    /**
     * is invoked by the wizard to register change listener. This method is invoked by the init method.
     *
     * @param model reference to the model
     */
    public void registerPropertyChangeListener( final WizardModel model )
    {
    }

    /** This method should be overwritten to set the standard values. */
    public void initDefaultValues()
    {
    }

    /**
     * return a property value.
     *
     * @param name the name of the property
     * @return reference to the property value
     */
    public Object getProperty( final String name )
    {
        Method method = null;
        try
        {
            method = ebi.getPropertyDescriptor( name ).getReadMethod();
            return method.invoke( model );
        }
        catch ( Exception ex )
        {
            final String msg = "Cannot get property \"" + name + "\" for WizardModel. Method invocation \"" + method +
                    "\" not successful.";
            LOG.error( msg, ex );
            throw new IllegalStateException( msg );
        }
    }

    /**
     * set a property value
     *
     * @param name  name of the property
     * @param value value of the property
     */
    public void setProperty( final String name, final Object value )
    {
        Method method = null;
        try
        {
            waitCursor( true );
            method = ebi.getPropertyDescriptor( name ).getWriteMethod();
            method.invoke( model, value );
        }
        catch ( Exception ex )
        {
            final String msg = "Cannot set property \"" + name + "\" for WizardModel. Method invocation \"" + method +
                    "\" with argument of " + value + " not successful.";
            LOG.error( msg, ex );
            throw new IllegalStateException( msg );
        }
        finally
        {
            waitCursor( false );
        }
    }

    /**
     * is invoked by the wizard if it initialize the pane
     *
     * @param model the wizard model
     */
    final public void init( final WizardModel model )
    {
        this.model = model;
        try
        {
            ebi = new ExtendedBeanInfo( model.getBeanInfo() );
            // validate model
            if ( !ebi.hasPropertyDescriptors( propertyNames ) )
            {
                final String msg = "model class " + model.getClass() +
                        " does not contain the required properties. " + Arrays.asList( propertyNames );
                LOG.error( msg );
                throw new IllegalStateException( msg );
            }
        }
        catch ( IntrospectionException ex )
        {
            final String msg = "cannot get bean information.";
            LOG.error( msg, ex );
            throw new IllegalStateException( msg );
        }
        registerPropertyChangeListener( model );
        initDefaultValues();
    }

    public void waitCursor( final boolean visible )
    {
        final JDialog dlg = (JDialog) this.getTopLevelAncestor();
        if ( dlg != null )
        {
            dlg.getGlassPane().setVisible( visible );
        }
    }

    protected JLabel createWizardPicture( final String resourceKey )
    {
        final JLabel wizardPicture = new JLabel();
        wizardPicture.setIcon( ImageLocator.getIcon( Strings.getString( resourceKey ) ) );
        wizardPicture.setBorder( BorderFactory.createEmptyBorder( 0, 0, 1, 0 ) );
        return wizardPicture;
    }

    /**
     * Create an intro component displaying text gotten from a string resource with the key <code>PREFIX.TEXT</code>, where <code>PREFIX</code> is the value of the argument given.<p> The component may i.e. be used to create the display area of the wizard.
     *
     * @param prefix the prefix used to access the key in the string resource
     * @return JScrollPane displaying the text
     */
    protected JScrollPane createIntroArea( final String prefix )
    {
        final String text = Strings.getString( prefix + ".TEXT" );
        final JTextPane textDisplay = new JTextPane();
        textDisplay.setContentType( "text/html" );
        textDisplay.setText( text );
        textDisplay.setEditable( false );
        textDisplay.setHighlighter( null );
        textDisplay.setFocusable( false );

        final SimpleAttributeSet attributes = new SimpleAttributeSet();
        StyleConstants.setAlignment( attributes, StyleConstants.ALIGN_LEFT );
        final StyledDocument doc = textDisplay.getStyledDocument();
        doc.setParagraphAttributes( 0, doc.getLength(), attributes, false );

        final JScrollPane scrollPane = new JScrollPane( textDisplay );
        scrollPane.setPreferredSize( new Dimension( 10, 250 ) );
        return scrollPane;
    }

    /**
     * Creates a component displaying a string with the default font but in bold. The string is loaded from the default resource property file by using the key <code>PREFIX.TITLE.TEXT</code>, where <code>PREFIX</code> is the argument given. Gaps are inserted before and after the title component.
     *
     * @param prefix used to prefix the key
     * @return the panel with the title
     */
    protected JPanel createDefaultTitlePanel( final String prefix )
    {
        final JLabel label = new JLabel( Strings.getString( prefix + ".TITLE.TEXT" ) );
        label.setFont( label.getFont().deriveFont( Font.BOLD ) );
        final JPanel panel = new JPanel( new BorderLayout() );
        panel.add( label, BorderLayout.CENTER );
        panel.setBorder( new EmptyBorder( Constants.GAP_BETWEEN_GROUP, 0, Constants.GAP_BETWEEN_GROUP, 0 ) );
        return panel;
    }

    protected JPanel createSimpleDisplayPanel( final String prefix, final JPanel edit )
    {
        final JPanel panel = new JPanel( new GridBagLayout() );
        final GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add( createTextPanel( prefix ), gbc );
        gbc.gridy += 1;
        panel.add( edit, gbc );
        gbc.gridy += 1;
        gbc.weighty = 1.0;
        panel.add( new JPanel(), gbc );
        return panel;
    }

    protected JButton createListEditButton( final String prefix, final ActionListener actionListener )
    {
        final JButton button = ComponentFactory.createButton( prefix, actionListener );
        button.setFocusable( false );
        button.setBorder( BorderFactory.createEmptyBorder() );
        button.setSize( button.getIcon().getIconHeight(), button.getIcon().getIconWidth() );
        return button;
    }
}
