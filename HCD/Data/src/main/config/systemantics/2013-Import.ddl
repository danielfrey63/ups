DROP TABLE EDGES IF EXISTS;
DROP TABLE VERTICES IF EXISTS;

-- VERTICDES
CREATE CACHED TABLE VERTICES(
  ID INTEGER NOT NULL PRIMARY KEY,
  NAME VARCHAR(32768) NOT NULL,
  RANK INTEGER NOT NULL,
  TYPE VARCHAR(32768) NOT NULL
);

-- EDGES
CREATE CACHED TABLE EDGES(
  ID INTEGER NOT NULL PRIMARY KEY,
  PARENT_ID INTEGER NOT NULL,
  CHILD_ID INTEGER NOT NULL,
  ROLE_ID INTEGER,
  RECURSIVE_ID INTEGER,
  RANK INTEGER,
  CONSTRAINT PK_PARENT_CHILD UNIQUE(PARENT_ID,CHILD_ID),
  CONSTRAINT FK_PARENT FOREIGN KEY(PARENT_ID) REFERENCES VERTICES(ID),
  CONSTRAINT FK_CHILD FOREIGN KEY(CHILD_ID) REFERENCES VERTICES(ID),
  CONSTRAINT FK_ROLE FOREIGN KEY(ROLE_ID) REFERENCES VERTICES(ID)
);

-- IMPORT VERTICES
DROP TABLE VERTICES_IMPORT IF EXISTS;
CREATE TEXT TABLE VERTICES_IMPORT (
  ID INTEGER,
  NAME VARCHAR(32768),
  RANK INTEGER,
  TYPE VARCHAR(32768)
);
SET TABLE VERTICES_IMPORT SOURCE OFF;
SET TABLE VERTICES_IMPORT SOURCE '2013-Vertices.tsv;fs=\t;ignore_first=true';

UPDATE VERTICES_IMPORT SET RANK=0 WHERE RANK IS NULL;
UPDATE VERTICES_IMPORT SET NAME='' WHERE NAME IS NULL;
SELECT * FROM VERTICES_IMPORT;

INSERT INTO VERTICES (SELECT * FROM VERTICES_IMPORT);
SELECT * FROM VERTICES;

-- IMPORT EDGES
DROP TABLE EDGES_IMPORT IF EXISTS;
CREATE TEXT TABLE EDGES_IMPORT (
  ID INTEGER,
  PARENT_ID INTEGER,
  CHILD_ID INTEGER,
  ROLE_ID INTEGER,
  RECURSIVE_ID INTEGER,
  RANK INTEGER
);
SET TABLE EDGES_IMPORT SOURCE OFF;
SET TABLE EDGES_IMPORT SOURCE '2013-Edges.tsv;fs=\t;ignore_first=true';

INSERT INTO EDGES (SELECT * FROM EDGES_IMPORT);
SELECT * FROM EDGES_IMPORT;

-- END
SHUTDOWN COMPACT;
